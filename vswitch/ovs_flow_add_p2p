#! /usr/bin/env python

import argparse
import re
import subprocess
import sys

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Add a port-to-port flow')

	parser.add_argument('--bridge', 
			    dest='bridge',
			    action='store',
			    help='Bridge to add flows to')
	parser.add_argument('--in-port', 
                dest='in_port', 
  			    action='store',
			    help='Input port (e.g. dpdk0)')
	parser.add_argument('--out-ports', 
			    dest='out_ports', 
  			    action='store',
			    help='Output ports (e.g. vhost-user1)')

	args = parser.parse_args()

	# Get OVS_DIR env variable
	cmd = ['bash', '-c', 'source vars.sh && env']
	proc = subprocess.Popen(cmd, stdout = subprocess.PIPE)
	for line in proc.stdout:
		(key, _, value) = line.partition('=')
		if key == 'OVS_DIR':
			ovs_dir = value.strip()
			break

	# Create portmap, mapping a symbolic port name to its number
	# portmap['vhost-user1'] = '8' 
	portmap={}
	cmd = ['sudo', ovs_dir + '/utilities/ovs-ofctl', 'show', args.bridge]
	proc = subprocess.Popen(cmd, stdout = subprocess.PIPE)
	for line in proc.stdout:
		# output example:  8(vhost-user1): addr:00:00:00:00:00:00
		match = re.search(r'(.*)\((.*)\): addr:', line)
		if match:
			portmap[match.group(2).strip()] = match.group(1).strip()

	
	
	if args.in_port not in portmap.keys():
		sys.exit(args.in_port + ' is not a valid port name')
	for out_port in args.out_ports.split(','):
		if out_port not in portmap.keys():
			sys.exit(out_port + ' is not a valid port name')
		
	in_port_num = portmap[args.in_port]
	out_ports_num = ','.join([portmap[i] for i in args.out_ports.split(',')])	
	cmd = ['sudo', 
	       ovs_dir + '/utilities/ovs-ofctl', 
	       'add-flow', 
	       args.bridge,
	       'in_port=' + in_port_num + ',action=output:' + out_ports_num]

	print(cmd)
	proc = subprocess.Popen(cmd, stdout = subprocess.PIPE)
	proc.communicate()
